roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
warnings()
roxygen2::roxygenise()
roxygen2::roxygenise()
source("~/Desktop/SISE/M2 SISE - Programmation R/naive bayes/naivebayesclassifier/R/naive_bayes_classifier.R", echo=TRUE)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
usethat::use_vignette("introduction")
devtools::use_vignette("introduction")
devtools::load_all()
plot(cars)
nb= naivebayesclassifier::naive_bayes_classifier$new()
nb
cars
iris
X= iris[, 1:4]
y= iris$Species
!naivebayesclassifier
!naivebayesclassifier::naive_bayes_classifier
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
nb$fit(X, y)
devtools::load_all()
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
nb$fit(X, y)
X= iris[, 1:4]
y= iris$Species
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
nb$fit(X, y)
nb
nb$getClasses
nb$getPrior
nb$getModel
nb$predict_proba(X)
nb$predict(X)
nb$evaluate(xtest=X, ytrue = y)
devtools::load_all()
X= iris[, 1:4]
y= iris$Species
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
nb$fit(X, y)
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
nb$fit(X, y)
X= iris[, 1:4]
y= iris$Species
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
nb$fit(X, y)
nb$evaluate(xtest=X, ytrue = y)
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
nb$fit(X, y)
devtools::load_all()
X= iris[, 1:4]
y= iris$Species
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
nb$fit(X, y)
nb$evaluate(xtest=X, ytrue = y)
X= iris[, 1:4]
y= iris$Species
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
nb$fit(X, y)
devtools::load_all()
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
nb$fit(X, y)
nb$evaluate(xtest=X, ytrue = y)
devtools::load_all()
devtools::reload_all()
devtools::reload()
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
devtools::load_all()
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
nb$fit(X, y)
nb$evaluate(xtest=X, ytrue = y)
gc()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::reload()
devtools::load_all()
View(confusionMatrix)
X= iris[, 1:4]
y= iris$Species
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
nb$fit(X, y)
nb$evaluate(xtest=X, ytrue = y)
?naivebayesclassifier
??naivebayesclassifier
?naivebayesclassifier::naivebayesclassifier
naive_bayes_default()
devtools::reload()
devtools::load_all()
devtools::load_all()
devtools::reload()
devtools::reload()
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
devtools::load_all()
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1)
nb$fit(X, y)
nb$evaluate(xtest=X, ytrue = y)
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1, reduction = "FA")
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1, reduction = "famd")
nb$fit(X, y)
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1, reduction = "pca")
nb$fit(X, y)
naivebayesclassifier::naive_bayes_classifier()
nb$getClasses
nb$getPrior
nb$getModel
nb$predict_proba(X)
nb$evaluate(xtest=X, ytrue = y)
nb$print()
print(nb)
print(nb)
nb$summary()
summary(nb)
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::reload()
devtools::load_all()
help(naive_bayes_classifier)
roxygen2::roxygenise()
nb$components_plot()
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1, discretize = "all")
nb$fit(X, y)
nb$components_plot()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::reload()
devtools::load_all()
install.packages("usethis")
install.packages("usethis")
usethat::use_vignette("introduction")
install.packages("usethat")
usethis::use_vignette("introduction")
library(naivebayesclassifier)
devtools::load_all()
devtools::install()
library(naivebayesclassifier)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::reload()
devtools::install()
.Last.error
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(naivebayesclassifier)
!naivebayesclassifier
?naivebayesclassifier
devtools::build_vignettes()
?naivebayesclassifier
devtools::reload()
devtools::install()
library(naivebayesclassifier)
root= "/Users/wendyamyameogo/Downloads/spam_ham_dataset.csv"
df= read.csv(root)
head(df)
root= "/Users/wendyamyameogo/Desktop/SISE/NLP/td6/train_data.csv"
df= read.csv(root)
root= "/Users/wendyamyameogo/Desktop/SISE/NLP/td6/data_train.csv"
df= read.csv(root)
head(df)
root= "/Users/wendyamyameogo/Desktop/SISE/NLP/td6/data_train.csv"
df= read.csv(root, sep=";")
head(df)
train_test <- function(data, train_size=0.7){
set.seed(1)
#use 70% of dataset as training set and 30% as test set
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(train_size,1-train_size))
train  <- data[sample, ]
test   <- data[!sample, ]
return (list(train= train, test= test))
}
obj1= naive_bayes_classifier$new(type = "default", smoothness = 1)
print(obj1)
default$fit(Xtrain, ytrain)
obj1$fit(Xtrain, ytrain)
root1= "/Users/wendyamyameogo/Downloads/ocd_patient_dataset.csv"
ocd_patient= read.csv(root)
dff= train_test(ocd_patient)
Xtrain = dff$train %>% select(-c("Depression.Diagnosis", "Anxiety.Diagnosis", "OCD.Diagnosis.Date", "Patient.ID"))
obj1$fit(iris[,1:4], iris$Species)
library("doParallel")
obj1$fit(iris[,1:4], iris$Species)
obj1$fit(iris[,1:4], iris$Species)
roxygen2::roxygenise()
devtools::document()
devtools::build_vignettes()
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
train_test <- function(data, train_size=0.7){
set.seed(1)
#use 70% of dataset as training set and 30% as test set
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(train_size,1-train_size))
train  <- data[sample, ]
test   <- data[!sample, ]
return (list(train= train, test= test))
}
# root1= "/Users/wendyamyameogo/Downloads/ocd_patient_dataset.csv"
# ocd_patient= read.csv(root)
#
# dff= train_test(ocd_patient)
#
# Xtrain = dff$train %>% select(-c("Depression.Diagnosis", "Anxiety.Diagnosis", "OCD.Diagnosis.Date", "Patient.ID"))
# ytrain = dff$train[,"Anxiety.Diagnosis"]
#
# Xtest = dff$test %>% select(-c("Depression.Diagnosis", "Anxiety.Diagnosis", "OCD.Diagnosis.Date", "Patient.ID"))
# ytest = dff$test[,"Anxiety.Diagnosis"]
#obj1= naive_bayes_classifier$new(type = "default", smoothness = 1)
#print(obj1)
#obj1$fit(Xtrain, ytrain)
#root= "/Users/wendyamyameogo/Desktop/SISE/NLP/td6/data_train.csv"
#df= read.csv(root, sep=";")
#head(df)
devtools::check()
devtools::check()
devtools::check()
library("dplyr")
iris %>% select(-"Species")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
X= iris[, 1:4]
y= iris$Species
n
X= iris[, 1:4]
y= iris$Species
m
devtools::check()
devtools::install()
library(naivebayesclassifier)
nn= naive_bayes_classifier$new(type="default", discretize = "non-gaussian")
nn$fit(iris[,1:4], iris$Species)
nn$getClasses
nn$getModel
nn$getModel$char
nn$predict_proba(iris[,1:4])
nn$getModel
source("naive_bayes_classifier.R")
X= iris[, 1:4]
y= iris$Species
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1, discretize = "non-gaussian")
nb$fit(X, y)
source("naive_bayes_classifier.R")
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1, discretize = "non-gaussian")
nb$fit(X, y)
source("naive_bayes_classifier.R")
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1, discretize = "non-gaussian")
nb$fit(X, y)
source("naive_bayes_classifier.R")
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1, discretize = "non-gaussian")
nb$fit(X, y)
source("./naive_bayes_classifier.R")
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1, discretize = "non-gaussian")
nb$fit(X, y)
source("../naive_bayes_classifier.R")
source("../naive_bayes_classifier.R")
source("naive_bayes_classifier.R")
source("naive_bayes_classifier.R")
source("naive_bayes_classifier.R")
source("naive_bayes_classifier.R")
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1, discretize = "non-gaussian")
nb$fit(X, y)
X= iris[, 1:4]
y= iris$Species
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1, discretize = "non-gaussian")
nb$fit(X, y)
source("naive_bayes_classifier.R")
nb= naivebayesclassifier::naive_bayes_classifier$new(type="default", smoothness = 1, discretize = "non-gaussian")
nb$fit(X, y)
